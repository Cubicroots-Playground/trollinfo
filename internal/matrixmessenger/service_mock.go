// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Cubicroots-Playground/trollinfo/internal/matrixmessenger (interfaces: Messenger)

// Package matrixmessenger is a generated GoMock package.
package matrixmessenger

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockMessenger) CreateChannel(arg0 context.Context, arg1 string) (*ChannelResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(*ChannelResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockMessengerMockRecorder) CreateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMessenger)(nil).CreateChannel), arg0, arg1)
}

// SendMessage mocks base method.
func (m *MockMessenger) SendMessage(arg0 context.Context, arg1 *Message) (*MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(*MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessengerMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessenger)(nil).SendMessage), arg0, arg1)
}

// SendMessageAsync mocks base method.
func (m *MockMessenger) SendMessageAsync(arg0 context.Context, arg1 *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageAsync", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageAsync indicates an expected call of SendMessageAsync.
func (mr *MockMessengerMockRecorder) SendMessageAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAsync", reflect.TypeOf((*MockMessenger)(nil).SendMessageAsync), arg0, arg1)
}
